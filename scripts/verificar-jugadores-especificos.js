require('dotenv').config();
const mongoose = require('mongoose');
const Jugador = require('../src/models/Jugador');
const Usuario = require('../src/models/Usuario');

// Configuraci√≥n de MongoDB
const MONGODB_URI = process.env.MONGO_URL || 'mongodb://localhost:27017/dodgeball-club';

async function verificarJugadoresEspecificos() {
  try {
    console.log('üîç Conectando a MongoDB...');
    console.log('üìç URI:', MONGODB_URI);
    
    await mongoose.connect(MONGODB_URI, {
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    });
    
    console.log('‚úÖ Conectado a MongoDB');

    console.log('\nüîç Verificando jugadores espec√≠ficos...');
    
    // Lista de jugadores que me pasaste originalmente
    const jugadoresOriginales = [
      'Felipe Demarco', 'Alejandro Rocca', 'Guzm√°n Demarco', 'Rafael Garc√≠a',
      'Valentino Gloodtdfosky', 'Salvador M√©ndez', 'Edewel Cremel', 'Ger√≥nimo Nicola',
      'Agust√≠n Giles', 'Santiago Giles', 'Diego Burrera', 'Pastor Pastor',
      'Santino Barreiro', 'Patricia Yanes', 'Josu√© Arboleda', 'Matheo Santos',
      'Ignacio Rodr√≠guez', 'Santiago Gil', 'Agust√≠n Sogliano', 'Mateo Alonso',
      'Facundo Alonso', 'Rodrigo P√©rez', 'Tiago Pereira'
    ];
    
    console.log(`üìà Total de jugadores originales: ${jugadoresOriginales.length}`);
    
    const jugadoresEncontrados = [];
    const jugadoresFaltantes = [];
    
    for (const nombreCompleto of jugadoresOriginales) {
      const [nombre, apellido] = nombreCompleto.split(' ');
      const jugador = await Jugador.findOne({ nombre, apellido }).populate('usuario', 'email');
      
      if (jugador) {
        jugadoresEncontrados.push({
          nombre: jugador.nombre,
          apellido: jugador.apellido,
          email: jugador.usuario?.email || 'Sin email',
          numeroCamiseta: jugador.numeroCamiseta,
          equipo: jugador.estadisticasPorEquipo?.[0]?.nombreEquipo || 'Sin equipo'
        });
      } else {
        jugadoresFaltantes.push(nombreCompleto);
      }
    }
    
    console.log(`\n‚úÖ Jugadores encontrados: ${jugadoresEncontrados.length}/${jugadoresOriginales.length}`);
    console.log(`‚ùå Jugadores faltantes: ${jugadoresFaltantes.length}`);
    
    if (jugadoresFaltantes.length > 0) {
      console.log('\nüìã Jugadores faltantes:');
      jugadoresFaltantes.forEach(jugador => console.log(`  - ${jugador}`));
    }
    
    console.log('\nüìã Jugadores encontrados:');
    jugadoresEncontrados.forEach((jugador, index) => {
      console.log(`${index + 1}. ${jugador.nombre} ${jugador.apellido} - #${jugador.numeroCamiseta} (${jugador.equipo}) - ${jugador.email}`);
    });
    
    // Verificar si hay jugadores con nombres similares
    console.log('\nüîç Buscando jugadores con nombres similares...');
    for (const nombreCompleto of jugadoresFaltantes) {
      const [nombre, apellido] = nombreCompleto.split(' ');
      
      // Buscar por nombre o apellido
      const jugadoresSimilares = await Jugador.find({
        $or: [
          { nombre: { $regex: nombre, $options: 'i' } },
          { apellido: { $regex: apellido, $options: 'i' } }
        ]
      }).populate('usuario', 'email');
      
      if (jugadoresSimilares.length > 0) {
        console.log(`\nüîç Posibles coincidencias para "${nombreCompleto}":`);
        jugadoresSimilares.forEach(j => {
          console.log(`  - ${j.nombre} ${j.apellido} - ${j.usuario?.email || 'Sin email'}`);
        });
      }
    }
    
    console.log('\n‚úÖ Verificaci√≥n completada');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
  }
}

verificarJugadoresEspecificos();
